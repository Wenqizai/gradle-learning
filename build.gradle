plugins {
    id 'java'
    id 'war'
}

group = 'com.wenqi'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation('org.springframework:spring-beans:5.2.25.RELEASE')
    implementation('org.springframework:spring-web:5.2.25.RELEASE')
    implementation('org.springframework:spring-webmvc:5.2.25.RELEASE')
    implementation('org.springframework:spring-jdbc:5.2.25.RELEASE')
    implementation('org.springframework:spring-tx:5.2.25.RELEASE')
    implementation('org.springframework:spring-test:5.2.25.RELEASE')
    implementation('org.springframework:spring-jdbc:5.2.25.RELEASE')

    implementation('mysql:mysql-connector-java:8.0.30')
    implementation('com.alibaba:druid:1.2.15')

    implementation('com.fasterxml.jackson.core:jackson-databind:2.13.4')
    implementation('com.fasterxml.jackson.core:jackson-core:2.13.4')
    implementation('com.fasterxml.jackson.core:jackson-annotations:2.13.4')

    implementation('org.aspectj:aspectjweaver:1.9.9.1')
    implementation('log4j:log4j:1.2.17')
    implementation('org.slf4j:slf4j-log4j12:1.7.36')
    implementation('jstl:jstl:1.2')
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

test {
    enabled(true)
    useJUnitPlatform()
    include('com/wenqi/**')
    exclude('com/wenqi/none/**')
}


task task1 {
    // 任务配置段: 在配置阶段执行
    println("Configure task1 ....")
    // 任务的行为: 在执行阶段执行, doFirst 在 doLast 之前执行
    doFirst {
        println "task1 doFirst"
    }
    doLast {
        println "task1 doLast"
    }
}

task1.doFirst {
    println "task1 doFirst outer ..."
}

task1.doLast {
    println "task1 doLast outer ..."
}


def map = new HashMap<String, Object>();
// action 属性可以设置为闭包, 设置 task 自身行为
map.put("action", { println "task action ..." })
task(map, "task2") {
    // 任务配置段: 在配置阶段执行
    println("Configure task2 ....")
    // 任务的行为: 在执行阶段执行, doFirst 在 doLast 之前执行
    doFirst {
        println "task2 doFirst"
    }
    doLast {
        println "task2 doLast"
    }
}

task A {
    doLast {
        println("taskA")
    }
}

task B {
    doLast {
        println("taskB")
    }
}

// 参数依赖
task C(dependsOn: ['A', 'B']) {
    doLast {
        println("taskC")
    }
}

// 内部依赖
task D {
    dependsOn = ['A', 'B']
    doLast {
        println("taskD")
    }
}

// 外部依赖
task E {
    doLast {
        println("taskE")
    }
}
E.dependsOn = ['A', 'B']

// 跨项目依赖
task F {
    dependsOn = [':root:subproject03:subproject03Hello']
    doLast {
        println("taskF")
    }
}